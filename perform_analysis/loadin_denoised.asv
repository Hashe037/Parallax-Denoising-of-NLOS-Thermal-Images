%script to load in denoised results for futher analysis in the
%"after_loadin_denoised" folder. The script converts the light field back
%to camera pictures to better compare the methods which is why the script
%takes some time to load in the variables.
%
%--------------------------------------------------------------------------
%inputs/parameters:
% -basefolder/lfield_name/den_name/strcat('rp',num2str(reduced_rp_range)) -- parameters about the denoising folder
%and some of the extraneous parameters (check perform_houghp_prpd.m for
%more information)
% -loadin_tv -- whether to load in a previously-done TV denoising or perform
%TV. TV is performed on a image-by-image basis
% -ref_offset -- for many of these experiments there is a slight delay between
%when the camera starts capturing to when the stage moves. This helps
%account for the difference in the dataset to the reference dataset
%(aluminum scattering surface). This variable changes and is best found by
%inspection or by finding the value that lends the highest metric values as
%this means there is the most overlap
%backthresh--baseline values to consider as background (any lower)
%--------------------------------------------------------------------------
%outputs/variables saved to workspace:
% -lfield_3d/lfield_3d_mlrs/lfield_3d_d/lfield_3d_ref -- 3-D matrices of light fields of
%the raw/MLRS/denoised/aluminum experiments
% -frames/ref_frames -- cell of actual camera images of raw/reference
% -denoised_pics/reg_pics/mlrs_pics -- dictionary version of the
%denosied/raw/frs post-processing. NOTE that you can check if the reverse
%light field creation process is working by comparing mlrs_pics or reg_pics
%to the loaded in database. They should be very similar after reshaping.
% -frames_lfield_tv/frames_lfield_mlrs_tv -- 3-d matrices of TV-denoised
%variables
%
%OPTIONAL LOAD IN
%comment these out if you want to load them in
% -noemi_pics -- pictures without the emissive term (SE process images)
% -fpn_noemi_pic -- picture of the estimated FPN after the SE process
%--------------------------------------------------------------------------
%todo
%-encapsulate TV process?


%% user parameters
mainfolder = 'E:\lfield_data\condensed';
datafolder = strcat(mainfolder,'\pat1_hc4_pos1'); %holds light field cube
groundfolder = strcat(mainfolder,'\ground_pos1'); %ground truth for the person position (aluminmum surface)
mappingfile = strcat(mainfolder,'\lfield_mapping.mat'); %mat file for the lfield -> pics mapping
cubeparamsfile = strcat(datafolder,'\cubeParams.mat'); %parameters about the light field cube

only_load_essentia

prpdParams = struct();
prpdParams.search_name = "prpd_normal"; %params for range of rp and thetaq values in PRP-D
% "prpd_normal" for high-resolution PRP-D, "prpd_head" for thicker PRP width and more accurate depth-location
prpdParams.prp_width = .5; %delta theta of PRP (.5 is normal). Larger means more averaging and smoother results.
prpdParams.filtered_prp = 0; %1 to perform PRP-D at single rp value, 0 to perform PRP-D across all rp
prpdParams.rp_filt = 2250; %SINGLE VALUE %if "filtered_prp", this is the single filtered rp value to denoise across

use_tv = 1;



%% load data
load(mappingfile) %lfield_mapping
load(strcat(datafolder,'\lfield_cube_raw.mat')); %lfield_cube (raw)
load(cubeparamsfile) %cubeParams

%find and load denoised light field
denoised_string = strcat(datafolder,'\',prpdParams.search_name,'\lfield_cube_den');
if prpdParams.filtered_prp
    denoised_string = strcat(denoised_string,'_',strcat('rp',num2str(prpdParams.rp_filt)));
end
try
    load(strcat(denoised_string,'.mat'));
catch
    error('Error: Cannot load in light field. Please check the denoised_string variable \n')
end

%raw picture frames
load(strcat(datafolder,'\lwir_frames.mat'))
% frames = frames(ref_offset+1:end); 
if cubeParams.latestart %shorten pic_frames if latestart
    frames = frames(6:end);
end

%reference light field (aluminum scattering surface)
lfield_cube_ground = load(strcat(groundfolder,"\lfield_cube_raw.mat"));
lfield_cube_ground = lfield_cube_ground.lfield_cube;

% ground_frames = load(strcat(groundfolder,'\lwir_frames.mat'));
% ground_frames = ground_frames.frames;
% if cubeParams.latestart %shorten pic_frames if latestart
%     ground_frames = ground_frames(6:end); %???
% end

%load in MLRS stuff
load(strcat(datafolder,'mlrs_results\lfield_cube_mlrs.mat'))
load(strcat(datafolder,'mlrs_results\pics_mlrs.mat'))

%load in pics without emissive term
% load(strcat(mainfolder,'\noemi_pics.mat'))

%load in FPN pic
% load(strcat(mainfolder,'\fpn_noemi_pic.mat'))

%SE lfield
load(strcat(datafolder,'mlrs_results\lfield_cube_se.mat'))
load(strcat(datafolder,'mlrs_results\pics_se.mat'))
        
%MLRS stuff

fprintf('Loaded in variables \n')

%% image parameters
im_h = 288; im_w = 382;
x_min_c = 1;
x_max_c = im_w;
y_min_c = 1;
y_max_c = im_h;

crop_L = x_max_c - x_min_c + 1;
crop_H = y_max_c - y_min_c + 1;


%% convert all that is in light field to pixel coordinates
lfield_cell = {lfield_cube_den,lfield_cube,lfield_cube_ground};
[pics_cell] = convert_lfield_to_pics(lfield_cell,lfield_mapping);
pics_den = pics_cell{1};
pics_raw = pics_cell{2};
pics_ground = pics_cell{3};

%post-processing images
% denoised_pics = postprocess_pics(denoised_pics,backthresh);
% pics_den(isnan(pics_den)) = 0; %get rid of nan values by just setting to 0

%IS THIS NEEDED????
% %remove nan values in images
% for camind = 1:size(pics_ground,1)
%     pics_ground(camind,:,:) = replace_image_nans(squeeze(pics_ground(camind,:,:)));
% end
% 
% %remove nan values in images
% for camind = 1:size(pics_ground,1)
%     pics_ground(camind,:,:) = replace_image_nans(squeeze(pics_ground(camind,:,:)));
% end

fprintf('Converted light field to images \n')

%% loadin or create TV denoised version
opts.maxIter = 100;%200;
opts.gdIter = 5;
opts.TV_type = 'Iso';
opts.p = 1;
opts.iter_tol = 5e-4;
opts.data_fit_tol = 0.2;
opts.breg_tol = 1e-1;
opts.nnls = false;
opts.diagnostics = false;

if ~exist(strcat(basefolder,'\',lfield_name,'\tv_denoised'), 'dir')
   mkdir(strcat(basefolder,'\',lfield_name,'\tv_denoised'))
end

%save prefix as mu with "" in for "."
tag_raw = num2str(raw_mu);
tag_raw = strrep(tag_raw,".","");
tag_mlrs = num2str(mlrs_mu);
tag_mlrs = strrep(tag_mlrs,".","");

raw_mu_name = strcat(basefolder,'\',lfield_name,'\tv_denoised\raw_recon_tv_lfield_mu',tag_raw,'.mat');
mlrs_mu_name = strcat(basefolder,'\',lfield_name,'\tv_denoised\mlrs_recon_tv_lfield_mu',tag_mlrs,'.mat');

%find/calculate TV
if loadin_tv == 0 %need to calculate TV for each camera picture individually
    frames_lfield_tv = zeros(size(pics_den));
    opts.mu = raw_mu;
    opts.lambda = 2*opts.mu;
    parfor camind=1:numPics %go through each picture
        [frames_lfield_tv(camind,:,:),~] = recon2D((double(squeeze(reg_pics(camind,:,:)))), [], opts);
    end
    fprintf('Completed raw tv... \n')

    frames_lfield_mlrs_tv = zeros(size(pics_den));
    opts.mu = mlrs_mu;
    opts.lambda = 2*opts.mu;
    parfor camind=1:numPics %go through each picture
        [frames_lfield_mlrs_tv(camind,:,:),~,~] = recon2D((double(squeeze(mlrs_pics(camind,:,:)))), [], opts);
    end
    fprintf('Completed FRS tv! \n')   
    
    save(raw_mu_name,'frames_lfield_tv');
    save(mlrs_mu_name,'frames_lfield_mlrs_tv');

else
    %best performing for masonite 
    load(raw_mu_name); 
    load(mlrs_mu_name);
end

fprintf("Loaded in/calculated TV denoised \n")
fprintf("Done \n")


